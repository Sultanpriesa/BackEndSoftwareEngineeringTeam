// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tablApi.Data;

#nullable disable

namespace tablApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassEntryStudent", b =>
                {
                    b.Property<int>("ClassEntriesClassEntry_ID")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudent_ID")
                        .HasColumnType("int");

                    b.HasKey("ClassEntriesClassEntry_ID", "StudentsStudent_ID");

                    b.HasIndex("StudentsStudent_ID");

                    b.ToTable("ClassEntryStudents", (string)null);
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.Property<int>("EnrolledClassesClass_ID")
                        .HasColumnType("int");

                    b.Property<int>("EnrolledStudentsStudent_ID")
                        .HasColumnType("int");

                    b.HasKey("EnrolledClassesClass_ID", "EnrolledStudentsStudent_ID");

                    b.HasIndex("EnrolledStudentsStudent_ID");

                    b.ToTable("StudentClasses", (string)null);
                });

            modelBuilder.Entity("tablApi.Model.Class", b =>
                {
                    b.Property<int>("Class_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Class_ID"));

                    b.Property<string>("Class_Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Class_yearLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tutor_ID")
                        .HasColumnType("int");

                    b.HasKey("Class_ID");

                    b.HasIndex("Tutor_ID");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Class_ID = 1,
                            Class_Desc = "Advanced mathematics class covering calculus and linear algebra",
                            Class_Name = "Mathematics",
                            Class_yearLevel = 1,
                            EndDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tutor_ID = 1
                        },
                        new
                        {
                            Class_ID = 2,
                            Class_Desc = "Introduction to physics covering mechanics and thermodynamics",
                            Class_Name = "Physics",
                            Class_yearLevel = 1,
                            EndDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tutor_ID = 1
                        },
                        new
                        {
                            Class_ID = 3,
                            Class_Desc = "Programming fundamentals and data structures",
                            Class_Name = "Computer Science",
                            Class_yearLevel = 1,
                            EndDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tutor_ID = 2
                        });
                });

            modelBuilder.Entity("tablApi.Model.ClassEntry", b =>
                {
                    b.Property<int>("ClassEntry_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassEntry_ID"));

                    b.Property<int>("ClassSchedule_ID")
                        .HasColumnType("int");

                    b.Property<int>("Class_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ClassEntry_ID");

                    b.HasIndex("ClassSchedule_ID");

                    b.HasIndex("Class_ID");

                    b.ToTable("ClassEntries");
                });

            modelBuilder.Entity("tablApi.Model.ClassSchedule", b =>
                {
                    b.Property<int>("Schedule_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Schedule_ID"));

                    b.Property<int>("Class_ID")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Schedule_ID");

                    b.HasIndex("Class_ID");

                    b.ToTable("ClassSchedules");

                    b.HasData(
                        new
                        {
                            Schedule_ID = 1,
                            Class_ID = 1,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Room = "Room 101",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 2,
                            Class_ID = 1,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Room = "Room 101",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 3,
                            Class_ID = 1,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Room = "Room 101",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 4,
                            Class_ID = 2,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            Room = "Room 102",
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 5,
                            Class_ID = 2,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            Room = "Room 102",
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 6,
                            Class_ID = 2,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            Room = "Room 102",
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 7,
                            Class_ID = 3,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Room = "Room 103",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Schedule_ID = 8,
                            Class_ID = 3,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Room = "Room 103",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("tablApi.Model.Student", b =>
                {
                    b.Property<int>("Student_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_ID"));

                    b.Property<string>("Student_LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<int>("student_yearLevel")
                        .HasColumnType("int");

                    b.HasKey("Student_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Student_ID = 1,
                            Student_LastName = "Johnson",
                            Student_firstName = "Alice",
                            User_ID = 4,
                            student_yearLevel = 1
                        },
                        new
                        {
                            Student_ID = 2,
                            Student_LastName = "Williams",
                            Student_firstName = "Bob",
                            User_ID = 5,
                            student_yearLevel = 2
                        },
                        new
                        {
                            Student_ID = 3,
                            Student_LastName = "Brown",
                            Student_firstName = "Charlie",
                            User_ID = 6,
                            student_yearLevel = 1
                        });
                });

            modelBuilder.Entity("tablApi.Model.Tutor", b =>
                {
                    b.Property<int>("Tutor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tutor_ID"));

                    b.Property<string>("Tutor_LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tutor_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Tutor_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Tutor_ID = 1,
                            Tutor_LastName = "Doe",
                            Tutor_firstName = "John",
                            User_ID = 2
                        },
                        new
                        {
                            Tutor_ID = 2,
                            Tutor_LastName = "Smith",
                            Tutor_firstName = "Jane",
                            User_ID = 3
                        });
                });

            modelBuilder.Entity("tablApi.Model.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("User_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            User_ID = 1,
                            User_email = "admin@school.com",
                            User_password = "admin123",
                            User_type = "Admin"
                        },
                        new
                        {
                            User_ID = 2,
                            User_email = "john.doe@school.com",
                            User_password = "hashed_password_2",
                            User_type = "Tutor"
                        },
                        new
                        {
                            User_ID = 3,
                            User_email = "jane.smith@school.com",
                            User_password = "hashed_password_3",
                            User_type = "Tutor"
                        },
                        new
                        {
                            User_ID = 4,
                            User_email = "alice@student.com",
                            User_password = "hashed_password_4",
                            User_type = "Student"
                        },
                        new
                        {
                            User_ID = 5,
                            User_email = "bob@student.com",
                            User_password = "hashed_password_5",
                            User_type = "Student"
                        },
                        new
                        {
                            User_ID = 6,
                            User_email = "charlie@student.com",
                            User_password = "hashed_password_6",
                            User_type = "Student"
                        });
                });

            modelBuilder.Entity("ClassEntryStudent", b =>
                {
                    b.HasOne("tablApi.Model.ClassEntry", null)
                        .WithMany()
                        .HasForeignKey("ClassEntriesClassEntry_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tablApi.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudent_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.HasOne("tablApi.Model.Class", null)
                        .WithMany()
                        .HasForeignKey("EnrolledClassesClass_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tablApi.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("EnrolledStudentsStudent_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tablApi.Model.Class", b =>
                {
                    b.HasOne("tablApi.Model.Tutor", "Tutor")
                        .WithMany("Courses")
                        .HasForeignKey("Tutor_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("tablApi.Model.ClassEntry", b =>
                {
                    b.HasOne("tablApi.Model.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassEntries")
                        .HasForeignKey("ClassSchedule_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tablApi.Model.Class", "Class")
                        .WithMany("ClassEntries")
                        .HasForeignKey("Class_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("tablApi.Model.ClassSchedule", b =>
                {
                    b.HasOne("tablApi.Model.Class", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("Class_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("tablApi.Model.Student", b =>
                {
                    b.HasOne("tablApi.Model.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("tablApi.Model.Student", "User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tablApi.Model.Tutor", b =>
                {
                    b.HasOne("tablApi.Model.User", "User")
                        .WithOne("Tutor")
                        .HasForeignKey("tablApi.Model.Tutor", "User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tablApi.Model.Class", b =>
                {
                    b.Navigation("ClassEntries");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("tablApi.Model.ClassSchedule", b =>
                {
                    b.Navigation("ClassEntries");
                });

            modelBuilder.Entity("tablApi.Model.Tutor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("tablApi.Model.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });
#pragma warning restore 612, 618
        }
    }
}
